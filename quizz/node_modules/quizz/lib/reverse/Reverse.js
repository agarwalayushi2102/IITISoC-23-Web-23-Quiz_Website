"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fs = require("fs");
var path = require("path");
var readline = require("readline");
var diacritics = require("diacritics");
var lodash_1 = require("lodash");
var AbstractGame_1 = require("../AbstractGame");
var ROOT_DIR = path.resolve(__dirname, '../');
var DURATION = 15 * 1000;
var MIN_WORD_LENGTH = 5;
var Reverse = /** @class */ (function (_super) {
    tslib_1.__extends(Reverse, _super);
    function Reverse(options) {
        var _this = _super.call(this) || this;
        _this.ready = false;
        _this.words = [];
        _this.loadDict(options.dictFile);
        return _this;
    }
    Reverse.prototype.loadDict = function (dictFile) {
        var _this = this;
        var filePath = path.resolve(ROOT_DIR, dictFile);
        var rl = readline.createInterface({
            input: fs.createReadStream(filePath)
        });
        rl.on('line', function (line) {
            var word = diacritics.remove(line.trim());
            if (word.length >= MIN_WORD_LENGTH)
                _this.words.push(word);
        });
        rl.on('close', function () {
            _this.ready = true;
        });
    };
    Reverse.prototype.start = function (output, over) {
        this.output = output;
        this.over = over;
        this.drawWord();
    };
    Reverse.prototype.handleMessage = function (word, user) {
        if (!this.currentWord)
            return;
        var answer = word.trim();
        var reversedWord = this.currentWord.split('').reverse().join('');
        if (answer === reversedWord) {
            this.output("Congratulations " + user + "!");
            this.over(user);
        }
    };
    Reverse.prototype.stop = function () {
        this.clearTimers();
        delete this.currentWord;
    };
    Reverse.prototype.clearTimers = function () {
        clearTimeout(this.to);
        delete this.to;
    };
    Reverse.prototype.drawWord = function () {
        var _this = this;
        this.currentWord = this.words[lodash_1.random(this.words.length - 1)];
        this.output("Reverse the following word:    " + this.currentWord);
        this.to = setTimeout(function () {
            _this.timeout();
        }, DURATION);
    };
    Reverse.prototype.timeout = function () {
        this.output('Timeout!');
        this.over(null);
    };
    Reverse.title = 'Reverse';
    Reverse.rules = 'Reverse the word as fast as possible!';
    return Reverse;
}(AbstractGame_1.AbstractGame));
exports.Reverse = Reverse;
